// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	data "github.com/hectorgabucio/donotdevelopmyapp/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddCharacterToUser provides a mock function with given fields: character, userId
func (_m *UserRepository) AddCharacterToUser(character *data.Character, userId string) error {
	ret := _m.Called(character, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Character, string) error); ok {
		r0 = rf(character, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseConn provides a mock function with given fields:
func (_m *UserRepository) CloseConn() {
	_m.Called()
}

// GetCharactersByUserId provides a mock function with given fields: userId
func (_m *UserRepository) GetCharactersByUserId(userId string) ([]data.UserCharacter, error) {
	ret := _m.Called(userId)

	var r0 []data.UserCharacter
	if rf, ok := ret.Get(0).(func(string) []data.UserCharacter); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.UserCharacter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreate provides a mock function with given fields: userResult, userWhere
func (_m *UserRepository) GetOrCreate(userResult *data.User, userWhere *data.User) error {
	ret := _m.Called(userResult, userWhere)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.User, *data.User) error); ok {
		r0 = rf(userResult, userWhere)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
